FROM nvcr.io/nvidia/cuda:12.8.1-cudnn-runtime-ubuntu22.04
# FROM nvcr.io/nvidia/l4t-jetpack:r36.4.0
# FROM ubuntu:22.04

# Tell apt (and other Debian tools) not to prompt for user input during package installs
ENV DEBIAN_FRONTEND=noninteractive

# Create folders
RUN mkdir -p /git/
RUN mkdir -p /ros2_ws/src

# Update the package list and install basic dependencies
RUN apt update
RUN apt upgrade -y
RUN apt install -y \
    wget gosu htop vim ruby tmux net-tools iproute2 python3-pip \
    mesa-utils
RUN gem install tmuxinator

# Install ROS2 Humble
# Based on https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html
RUN apt update
RUN apt install -y locales 
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
RUN apt install -y software-properties-common curl
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu \
    $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt update
RUN apt upgrade -y
RUN apt install -y ros-humble-desktop
RUN apt install -y ros-dev-tools
RUN apt install -y ros-humble-bondcpp ros-humble-ament-cmake-clang-format
RUN echo "source /opt/ros/humble/setup.bash" >> /root/.bashrc
RUN rosdep init
# Set ROS_DOMAIN_ID to isolate ROS 2
ENV ROS_DOMAIN_ID=1

# Build PX4 messages (do it early to save time when rebuilding the image)
WORKDIR /ros2_ws/src
RUN git clone -b release/1.15 https://github.com/PX4/px4_msgs.git
WORKDIR /ros2_ws
RUN rosdep update
RUN rosdep install --from-paths src --ignore-src --rosdistro humble -y
RUN bash -c "source /opt/ros/humble/setup.bash && colcon build --symlink-install"
WORKDIR /

# XRCE-DDS (do it early to save time when rebuilding the image)
# Based on https://micro-xrce-dds.docs.eprosima.com/en/latest/installation.html#installing-the-agent-standalone
RUN git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git /git/Micro-XRCE-DDS-Agent
WORKDIR /git/Micro-XRCE-DDS-Agent
RUN mkdir build && cd build && \
    cmake .. && \
    make && \
    make install && \
    ldconfig
WORKDIR /
# run with $ MicroXRCEAgent udp4 -p 8888

# YOLOv8 (in virtual environment /yolo-env/) and ONNX runtime with GPU support
# See also https://github.com/ultralytics/ultralytics/blob/main/README.md
# And https://onnxruntime.ai/getting-started
RUN apt install -y python3-venv
RUN python3 -m venv /yolo-env
RUN /yolo-env/bin/pip3 install --upgrade pip
RUN /yolo-env/bin/pip3 install ultralytics
RUN /yolo-env/bin/pip3 install onnx
RUN /yolo-env/bin/pip3 install onnxruntime-gpu
# Save the model weights (ONNX, Opset 12) and download a sample video
RUN /yolo-env/bin/python3 -c "from ultralytics import YOLO; YOLO('yolov8n.pt').export(format='onnx', opset=12)"
RUN wget https://github.com/intel-iot-devkit/sample-videos/raw/master/car-detection.mp4 -O /sample.mp4
# check with /yolo-env/bin/python3 -c "import ultralytics; print(ultralytics.__version__)"
# and /yolo-env/bin/python -c "import onnxruntime as ort; print(ort.__version__)"

# pymavlink
RUN pip3 install --upgrade pip
RUN pip3 install pymavlink
# check with $ python3 -c "import pymavlink; print(pymavlink.__version__)"

# MAVSDK
# Based on: https://mavsdk.mavlink.io/main/en/cpp/guide/build_linux.html
RUN git clone https://github.com/mavlink/MAVSDK.git /git/MAVSDK
WORKDIR /git/MAVSDK
RUN git checkout v3.6.0
RUN git submodule update --init --recursive
RUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_MAVSDK_SERVER=ON -Bbuild -S.
RUN cmake --build build -j8
RUN cmake --build build --target install
RUN ldconfig
WORKDIR /
# check with $ pkg-config --modversion mavsdk
# and /git/MAVSDK/build/src/mavsdk_server/src/mavsdk_server udpin://127.0.0.1:14550


# Copy resources from this repository
COPY resources/ /git/resources

# Build ROS 2 workspace
WORKDIR /ros2_ws
RUN rosdep update
RUN rosdep install --from-paths src --ignore-src --rosdistro humble -y
RUN bash -c "source /opt/ros/humble/setup.bash && colcon build --symlink-install"
# source /opt/ros/humble/setup.bash && source /ros2_ws/install/setup.bash

# Final config
WORKDIR /
ENTRYPOINT ["/bin/bash"]
# ENTRYPOINT ["tmuxinator", "start", "-p", "/git/resources/tmuxinator/aircraft_tmuxinator.yml"]
