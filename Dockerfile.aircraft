################################################################################
# Stage 1 - 8GB ################################################################
################################################################################
FROM nvcr.io/nvidia/cuda:12.8.1-cudnn-runtime-ubuntu22.04 AS ros2-image
# FROM nvcr.io/nvidia/l4t-jetpack:r36.4.0
# FROM ubuntu:22.04

# Tell apt (and other Debian tools) not to prompt for user input during package installs
ENV DEBIAN_FRONTEND=noninteractive

# Update the package list and install basic dependencies
RUN apt update \
    && apt install -y --no-install-recommends \
        wget gosu htop vim ruby tmux net-tools iproute2 iputils-ping python3-pip \
        mesa-utils \
    && gem install tmuxinator \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# Install ROS2 Humble
# Based on https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html
RUN apt update \
    && apt install -y --no-install-recommends \
        locales \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
RUN apt update \
    && apt install -y --no-install-recommends \
        software-properties-common curl \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu \
    $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt update \
    && apt install -y --no-install-recommends \
        ros-humble-desktop ros-dev-tools \
        ros-humble-bondcpp ros-humble-ament-cmake-clang-format \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN echo "source /opt/ros/humble/setup.bash" >> /root/.bashrc
RUN rosdep init

################################################################################
# Stage 2 - 8GB ################################################################
################################################################################
FROM ros2-image AS ros2-px4msgs-image

# Build PX4 messages
RUN mkdir -p /ros2_ws/src
RUN git clone --depth 1 --branch release/1.15 https://github.com/PX4/px4_msgs.git /ros2_ws/src/px4_msgs
WORKDIR /ros2_ws
RUN rosdep update
RUN rosdep install --from-paths src --ignore-src --rosdistro humble -y
# Explicitly use bash, not sh, to source and build the workspace
RUN bash -c "source /opt/ros/humble/setup.bash && colcon build --symlink-install"

################################################################################
# Stage 3 - 8.5GB ##############################################################
################################################################################
FROM ros2-px4msgs-image AS ros2-px4msgs-dds-image

# XRCE-DDS
# Based on https://micro-xrce-dds.docs.eprosima.com/en/latest/installation.html#installing-the-agent-standalone
RUN mkdir -p /git/
RUN git clone --depth 1 --branch master https://github.com/eProsima/Micro-XRCE-DDS-Agent.git /git/Micro-XRCE-DDS-Agent
WORKDIR /git/Micro-XRCE-DDS-Agent
RUN mkdir build && cd build && \
    cmake .. && \
    make -j$(nproc) && \
    make install && \
    ldconfig
# Run with $ MicroXRCEAgent udp4 -p 8888

################################################################################
# Stage 4 - 15GB ###############################################################
################################################################################
FROM ros2-px4msgs-dds-image AS ros2-px4msgs-dds-yolo-image

# YOLOv8 (in virtual environment /yolo-env/) and ONNX runtime with GPU support
# See https://github.com/ultralytics/ultralytics/blob/main/README.md and https://onnxruntime.ai/getting-started
RUN apt update \
    && apt install -y --no-install-recommends \
        python3-venv \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN python3 -m venv /yolo-env
RUN /yolo-env/bin/pip3 install --no-cache-dir --upgrade pip && \
    /yolo-env/bin/pip3 install --no-cache-dir --resume-retries 5 ultralytics onnx onnxruntime-gpu
# Check YOLO with $ /yolo-env/bin/python3 -c "import ultralytics; print(ultralytics.__version__)"
# Check ONNX Runtime with $ /yolo-env/bin/python3 -c "import onnxruntime as ort; print(ort.__version__)"

# Save the model weights (ONNX, Opset 12) and download a sample video
WORKDIR /
RUN /yolo-env/bin/python3 -c "from ultralytics import YOLO; YOLO('yolov8n.pt').export(format='onnx', opset=12)"
RUN wget https://github.com/intel-iot-devkit/sample-videos/raw/master/person-bicycle-car-detection.mp4 -O /sample.mp4

################################################################################
# Stage 5 - 16GB ###############################################################
################################################################################
FROM ros2-px4msgs-dds-yolo-image AS ros2-px4msgs-dds-yolo-mavsdk-image

# MAVSDK
# Based on: https://mavsdk.mavlink.io/main/en/cpp/guide/build_linux.html
RUN mkdir -p /git/
RUN git clone --depth 1 --branch v3.6.0 https://github.com/mavlink/MAVSDK.git /git/MAVSDK
WORKDIR /git/MAVSDK
RUN git submodule update --init --recursive --depth 1
RUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_MAVSDK_SERVER=ON -Bbuild -S. && \
    cmake --build build -j$(nproc) && \
    cmake --build build --target install
RUN ldconfig
# Check with $ pkg-config --modversion mavsdk
# Run with $ /git/MAVSDK/build/src/mavsdk_server/src/mavsdk_server

# # pymavlink
# RUN pip3 install --no-cache-dir --upgrade pip \
#     && pip3 install --no-cache-dir pymavlink
# # Check with $ python3 -c "import pymavlink; print(pymavlink.__version__)"

################################################################################
# Stage 6 - 16+GB ##############################################################
################################################################################
FROM ros2-px4msgs-dds-yolo-mavsdk-image AS aircraft-dev-image

RUN apt-get update && apt-get install -y wget gnupg lsb-release \
    && apt-get update && \
    apt-get install -y gstreamer1.0-tools gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-libav \
    python3-opencv

# THIS LET GSTREAMER WORK WITH SYSTEM PYTHON I NEED IT IN THE VENV
# python3 -c "import cv2; print(cv2.getBuildInformation())"
# /yolo-env/bin/python3 -c "import cv2; print(cv2.getBuildInformation())"
RUN pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir "numpy<2"

# Adding this in the ros2 base image for some reason breaks the gstreamer visualization
        # gstreamer1.0-tools gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-libav \
        # python3-gi gir1.2-gst-plugins-base-1.0 gir1.2-gstreamer-1.0 \

# Adding this also breaks the gstreamer visualization...the problem might be with the clean and rm -rf?
RUN apt update \
    && apt install -y --no-install-recommends \
        socat
#     && apt clean \
#     && rm -rf /var/lib/apt/lists/*

# add system yolo
RUN pip3 install --no-cache-dir --resume-retries 5 \
    # First, install the necessary dependencies, but NOT opencv-python # we are sticking with the system one which is 4.5.4 and not the 4.6 required by ultralytics
    torch torchvision numpy pandas Pillow tqdm requests py-cpuinfo ultralytics-thop \
    onnx \
    onnxruntime-gpu && \
    # Now, install ultralytics itself, ignoring its dependency list
    pip3 install --no-cache-dir --no-deps ultralytics
WORKDIR /
RUN python3 -c "from ultralytics import YOLO; YOLO('yolov8n.pt').export(format='onnx', opset=12)"

# Copy resources from this repository
COPY resources/ /git/resources

# Build ROS 2 workspace
RUN mkdir -p /ros2_ws/src
WORKDIR /ros2_ws
RUN rosdep update
RUN rosdep install --from-paths src --ignore-src --rosdistro humble -y
# Explicitly use bash, not sh, to source and build the workspace
RUN bash -c "source /opt/ros/humble/setup.bash && colcon build --symlink-install"
RUN echo "source /ros2_ws/install/setup.bash" >> /root/.bashrc
# If needed (but already in .bashrc) $ source /opt/ros/humble/setup.bash && source /ros2_ws/install/setup.bash

# Final config
WORKDIR /
ENTRYPOINT ["tmuxinator", "start", "-p", "/git/resources/tmuxinator/aircraft.yml.erb"]
# ENTRYPOINT ["/bin/bash"]
