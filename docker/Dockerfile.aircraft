################################################################################
# Stage 1 - 8GB ################################################################
################################################################################
FROM nvcr.io/nvidia/cuda:12.8.1-cudnn-runtime-ubuntu22.04 AS ros2-image
# FROM nvcr.io/nvidia/l4t-jetpack:r36.4.0
# FROM ubuntu:22.04

# Tell apt (and other Debian tools) not to prompt for user input during package installs
ENV DEBIAN_FRONTEND=noninteractive

# Update the package list and install basic dependencies
RUN apt update \
    && apt install -y --no-install-recommends \
        wget gosu htop vim ruby tmux net-tools iproute2 iputils-ping \
        python3-pip python3-venv \
        mesa-utils \
    && gem install tmuxinator \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# Install ROS2 Humble
# Based on https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html
RUN apt update \
    && apt install -y --no-install-recommends \
        locales \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
RUN apt update \
    && apt install -y --no-install-recommends \
        software-properties-common curl \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu \
    $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt update \
    && apt install -y --no-install-recommends \
        ros-humble-desktop ros-dev-tools \
        ros-humble-bondcpp ros-humble-ament-cmake-clang-format \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN echo "source /opt/ros/humble/setup.bash" >> /root/.bashrc
RUN rosdep init

################################################################################
# Stage 2 - 8GB ################################################################
################################################################################
FROM ros2-image AS ros2-px4msgs-image

# Build PX4 messages
RUN mkdir -p /ros2_ws_github/src
RUN git clone --depth 1 --branch release/1.15 https://github.com/PX4/px4_msgs.git /ros2_ws_github/src/px4_msgs
WORKDIR /ros2_ws_github
RUN rosdep update
RUN rosdep install --from-paths src --ignore-src --rosdistro humble -y
# Explicitly use bash, not sh, to source and build the workspace
RUN bash -c "source /opt/ros/humble/setup.bash && colcon build --symlink-install"

################################################################################
# Stage 3 - 8.5GB ##############################################################
################################################################################
FROM ros2-px4msgs-image AS ros2-px4msgs-dds-image

# XRCE-DDS
# Based on https://micro-xrce-dds.docs.eprosima.com/en/latest/installation.html#installing-the-agent-standalone
RUN mkdir -p /git/
RUN git clone --depth 1 --branch master https://github.com/eProsima/Micro-XRCE-DDS-Agent.git /git/Micro-XRCE-DDS-Agent
WORKDIR /git/Micro-XRCE-DDS-Agent
RUN mkdir build && cd build && \
    cmake .. && \
    make -j$(nproc) && \
    make install && \
    ldconfig
# Run with $ MicroXRCEAgent udp4 -p 8888

################################################################################
# Stage 4 - 9GB ################################################################
################################################################################
FROM ros2-px4msgs-dds-image AS ros2-px4msgs-dds-mavsdk-image

# MAVSDK
# Based on: https://mavsdk.mavlink.io/main/en/cpp/guide/build_linux.html
RUN mkdir -p /git/
RUN git clone --depth 1 --branch v3.6.0 https://github.com/mavlink/MAVSDK.git /git/MAVSDK
WORKDIR /git/MAVSDK
RUN git submodule update --init --recursive --depth 1
RUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_MAVSDK_SERVER=ON -Bbuild -S. && \
    cmake --build build -j$(nproc) && \
    cmake --build build --target install
RUN ldconfig
# Check with $ pkg-config --modversion mavsdk
# Run with $ /git/MAVSDK/build/src/mavsdk_server/src/mavsdk_server

# # pymavlink
# RUN pip3 install --no-cache-dir --upgrade pip \
#     && pip3 install --no-cache-dir --resume-retries 5 pymavlink
# # Check with $ python3 -c "import pymavlink; print(pymavlink.__version__)"

################################################################################
# Stage 5 - 16GB ###############################################################
################################################################################
FROM ros2-px4msgs-dds-mavsdk-image AS ros2-px4msgs-dds-mavsdk-yolo-image

# Install YOLOv8 and ONNX in virtual environment /yolo-env/
# See https://github.com/ultralytics/ultralytics/blob/main/README.md and https://onnxruntime.ai/getting-started
RUN python3 -m venv /yolo-env
RUN /yolo-env/bin/pip3 install --no-cache-dir --upgrade pip && \
    /yolo-env/bin/pip3 install --no-cache-dir --resume-retries 5 ultralytics onnx
# Check YOLO with $ /yolo-env/bin/python3 -c "import ultralytics; print(ultralytics.__version__)"

# Save the model weights (ONNX, Opset 12), class names, and download a sample video
WORKDIR /
# Model options (from fastest to most accurate, <10MB to >100MB): yolov8s, yolov8s, yolov8m, yolov8l, yolov8x
RUN /yolo-env/bin/python3 -c "from ultralytics import YOLO; YOLO('yolov8s.pt').export(format='onnx', opset=12)"
RUN yolo-env/bin/python3 -c "import json; from ultralytics import YOLO; print(json.dumps(YOLO('yolov8s.pt').names))" | grep '{' > coco.json
RUN wget https://github.com/intel-iot-devkit/sample-videos/raw/master/person-bicycle-car-detection.mp4 -O /sample.mp4

# Add GStreamer, Python OpenCV, socat packages
RUN apt update \
    && apt install -y --no-install-recommends \
        gstreamer1.0-tools gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav \
        python3-opencv \
        socat \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# NOTE: we want system Python's OpenCV to have GStreamer support
RUN pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir --resume-retries 5 "numpy<2"
# Check with $ python3 -c "import cv2; print(cv2.getBuildInformation())"
# Versus $ /yolo-env/bin/python3 -c "import cv2; print(cv2.getBuildInformation())"

# Add ONNX Runtime with GPU support for system Python
RUN pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir --resume-retries 5 onnxruntime-gpu
# Check with $ python3 -c "import onnxruntime as ort; print(ort.__version__)"

################################################################################
# Stage 6 - 17+GB ##############################################################
################################################################################
FROM ros2-px4msgs-dds-mavsdk-yolo-image AS aircraft-dev-image

# Install KISS-ICP
RUN pip3 install --no-cache-dir --upgrade "cmake>=3.24"
RUN mkdir -p /ros2_ws_github/src
WORKDIR /ros2_ws_github
RUN git clone https://github.com/PRBonn/kiss-icp.git src/kiss-icp
# Explicitly use bash, not sh, to source and build the workspace
RUN bash -c "source /opt/ros/humble/setup.bash && colcon build --symlink-install"

# Install Zenoh
RUN echo "deb [trusted=yes] https://download.eclipse.org/zenoh/debian-repo/ /" | sudo tee -a /etc/apt/sources.list > /dev/null
RUN apt-get update && \
    apt-get install -y zenoh-bridge-ros2dds \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# Build round_system_msgs in the ROS 2 workspace
RUN mkdir -p /ros2_ws/src
COPY simulation_ws/src/ground_system_msgs /ros2_ws/src/ground_system_msgs
WORKDIR /ros2_ws
RUN rosdep update
RUN rosdep install --from-paths src/ --ignore-src --rosdistro humble -y
# Explicitly use bash, not sh, to source and build the workspace
RUN bash -c "source /opt/ros/humble/setup.bash && source /ros2_ws_github/install/setup.bash && colcon build --symlink-install"

# Copy resources and configuration files from this repository
COPY aircraft_resources/ /aircraft_resources
COPY aircraft_resources/patches/kiss_icp.rviz /ros2_ws_github/src/kiss-icp/ros/rviz/kiss_icp.rviz

# Source the workspaces
RUN echo "source /ros2_ws_github/install/setup.bash" >> /root/.bashrc
RUN echo "source /ros2_ws/install/setup.bash" >> /root/.bashrc
# If needed (but already in .bashrc) $ source /opt/ros/humble/setup.bash && source /ros2_ws_github/install/setup.bash && source /ros2_ws/install/setup.bash

# Final config
WORKDIR /
ENTRYPOINT ["tmuxinator", "start", "-p", "/aircraft_resources/aircraft.yml.erb"]
# ENTRYPOINT ["/bin/bash"]
